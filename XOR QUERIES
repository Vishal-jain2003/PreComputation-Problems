https://leetcode.com/problems/xor-queries-of-a-subarray/description/?envType=daily-question&envId=2024-09-13



class Solution {
    public int[] xorQueries(int[] arr, int[][] queries) {
        int[] ans = new int[queries.length];
        int[] pref = new int[arr.length];
        pref[0]=arr[0];
        for (int i=1;i<arr.length;i++)
        {
            pref[i]=pref[i-1]^arr[i];
        }
        // here prefix sum formula derived as
        // take an example 
        // when we have to find query from [1,2]
        // now it means 3^4
        // but in prefix array at index 2 we have 1^3^4
        // and we only want 3^4 so here we have to use a formula
        // that is pref[b]^pref[a-1] 
        // here it as
        // (1^3^4) ^ (1) now it cancels redundant and we get our answer 
        // special case:when a=0 then it can't go back it occurs array index out of bound exception then now we only take pref[b]
        for (int i=0;i<queries.length;i++)
        {
            int a = queries[i][0];
            int b = queries[i][1];
            if (a==0)
            {
                ans[i]=pref[b];
            }
            else
            {
                ans[i]=pref[b]^pref[a-1];
            }
        }
        return ans;
    }
}


Example 1:

Input: arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]]
Output: [2,7,14,8] 
Explanation: 
The binary representation of the elements in the array are:
1 = 0001 
3 = 0011 
4 = 0100 
8 = 1000 
The XOR values for queries are:
[0,1] = 1 xor 3 = 2 
[1,2] = 3 xor 4 = 7 
[0,3] = 1 xor 3 xor 4 xor 8 = 14 
[3,3] = 8
Example 2:

Input: arr = [4,8,2,10], queries = [[2,3],[1,3],[0,0],[0,3]]
Output: [8,0,4,4]
 

Constraints:

1 <= arr.length, queries.length <= 3 * 104
1 <= arr[i] <= 109
queries[i].length == 2
0 <= lefti <= righti < arr.length
